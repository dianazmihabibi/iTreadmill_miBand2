#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.17
# In conjunction with Tcl version 8.6
#    Oct 15, 2018 02:06:38 PM WIB  platform: Linux
#    Oct 15, 2018 04:03:52 PM WIB  platform: Linux
import threading
import sys
##from multiprocessing import Process
##sys.path.insert(0, 'MiBand2/')
##import time
##from base import MiBand2
##from constants import ALERT_TYPES
##
###MAC ADDRESS MI BAND 2
##MAC = 'D6:EC:F2:B3:70:BA'
import time
import datetime
import coba
import os
import RPi.GPIO as GPIO
from homepage_support import *
##import thread

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

def recap():
##    print('coba_support.recap')
    sys.stdout.flush()
    import recap
    recap.create_Treadmill(root, 'new')
    
state = False
# Our time structure [min, sec, centsec]
timer = [0, 0, 0]
# The format is padding all the 
pattern = '{0:02d}:{1:02d}:{2:02d}'

# Default Speed is 1.0 km/h
speed = 1.0

def run_treadmill():
    GPIO.setmode(GPIO.BCM)
    GPIO.setup(26, GPIO.OUT)
    GPIO.output(26, GPIO.HIGH)

    time.sleep(0.1)
##    root.after(250)

    GPIO.output(26, GPIO.LOW)
    GPIO.cleanup()
    
    w.speed_val.configure(text=speed)

timeString = ''
def update_timeText():
    if (state):
        global timer
        global root
        global timeString
        # Every time this function is called, 
        # we will increment 1 centisecond (1/100 of a second)
        timer[2] += 1
        
        # Every 100 centisecond is equal to 1 second
        if (timer[2] >= 100):
            timer[2] = 0
            timer[1] += 1
        # Every 60 seconds is equal to 1 min
        if (timer[1] >= 60):
            timer[0] += 1
            timer[1] = 0
        # We create our time string here
        timeString = pattern.format(timer[0], timer[1], timer[2])
        w.timer.configure(text=timeString)
    root.after(10,update_timeText)

##state = False
### Our time structure [min, sec, centsec]
##timer = [0, 0, 0]
### The format is padding all the 
##pattern = '{0:02d}:{1:02d}:{2:02d}'
hr = 0
steps = 0
##waktu = []
##bpm = []
##step = []

def data():
##    while True:
    global hr
    global steps
    
    if(state):
        fp = open('log.txt', 'r',os.O_NONBLOCK).read()
        lines = fp.split('\n')
        batas = len(lines)-2

        waktu = []
        bpm = []
        step = []

        for line in lines[batas:]:
            if len(line)>= 1:
                a, b, c = line.split(',')
            waktu.append(str(a))
            bpm.append(str(b))
            step.append(str(c))
        hr = int(bpm[1])
        steps = int(step[1])
        w.hr_val.configure(text=hr)
        w.step_value.configure(text=steps)
##        print (hr,steps)
##    time.sleep(2.3)
        root.after(1000,data)

currentDT = datetime.datetime.now()
file_path = ''
def save():
    if(state):
        global currentDT
        global timer
        global hr
        global steps
        global speed
        global jarak
        global cal
        global file_path
        global min
        global max
        global speed_mode
        
        time_stamp = currentDT.strftime("%d-%m-%Y %H:%M:%S")
        file_path =  '/home/pi/Downloads/page/logs/log_'+ time_stamp + '.txt'
    ##    file_path = '/home/pi/Downloads/page/logs/log2.txt'
        fp = open(file_path, 'a', os.O_NONBLOCK)
        data = "%s,%s,%s,%s,%s,%s,%s,%s,%s\n" % (timeString, hr, steps, speed, jarak, cal, min, max, speed_mode)
        fp.write (data)
    ##    print (data)
        fp.close
        root.after(1000,save)
    
    

##start = False
start_time = 0
elapsed_time = 0
cal = 0
max_kalori = 0
def start():
##    print('coba_support.start')
    sys.stdout.flush()
    run_treadmill()
    time.sleep(2.5)
##    global start
##    start = True
    global state
    global start_time
    state = True
##    t1=threading.Thread(target=update_timeText)
##    t2=threading.Thread(target=data)
##    t1.start()
##    t1.join()
    
    update_timeText()
##    p1 = Process(target = update_timeText)
##    p1.start()
##    p1.join()
    w.start.configure(text="Finish", command=finish)
    start_time = time.time()
##    t2.start()
##    t2.join()
##    w.hr_val.configure(text=bpm[1])
##    w.step_value.configure(text=step[1])
##    thread.start_new_thread(data())
##    data()
    data()
    save()
    auto_speed()
    distance()
    calories()
    
##    kalori()
##    p2 = Process(target = data)
##    p2.start()
##    p1.join()
##    p2.join()
jarak = 0
def distance():
    if (state) :
        global start_time
        global elapsed_time
        global jarak
        global speed
        elapsed_time = time.time() - start_time
##        elapsed_time = time.strftime("%S", time.gmtime(elapsed_time))
        elapsed_time = int(elapsed_time)
##        elapsed_time = time.gmtime(elapsed_time)
##        elapsed_time = round(elapsed_time,3)
        
##        print (elapsed_time)
        jarak = (speed/3600) * elapsed_time
        jarak = round(jarak,2)
##        print (jarak)
        w.cov_val.configure(text=jarak)
        root.after(1000,distance)

def calories():
    if(state):
        global jk
        global hr
        global weight
        global age
        global elapsed_time
        global cal
        global kalor
##        hr = float(hr)
##        weight = float(weight)
##        age = float(age)
##        elapsed_time = float(elapsed_time)
##        calories = []
        if elapsed_time > 0.0 :
            if jk == 0:
                cal = ((-55.0969 + (0.6309 * hr)+(0.1988 * weight)+(0.2017*age))/4.184)*(60.0*elapsed_time/3600)
            else :
                cal = ((-20.4022 + (0.4472 * hr)+(0.1263 * weight)+(0.074*age))/4.184)*(60.0*elapsed_time/3600)        
        cal = int(cal)
##        print("calorinya segini loch!", cal)
        w.cal_val.configure(text=cal)
        
##        kalori()
        root.after(1000,calories)
##
##def kalori():
##    global cal
##    global max_kalori
##    
##    kalori = []
##    kalori.append(str(cal))
##    max_kalori = max(kalori)
##    print (kalori, max_kalori)
##    w.cal_val.configure(text=cal)
##    root.after(1000,kalori)

def finish():
##    print('coba_support.finish')
    sys.stdout.flush()
    run_treadmill()
    global state
    state = False
    update_timeText()
    data()
    w.start.configure(text="Restart", command=reset)
    
    path = open('path.txt', 'w', os.O_NONBLOCK)
    fill = "%s" % (file_path)
    path.write(fill)
    path.close()

def reset():
    global jarak
    global timer
    global speed
    global cal
    global hr
    global steps
    steps=0
    hr=0
    jarak=0
    cal=0
    speed = 1.0
    timer = [0, 0, 0]
    w.timer.configure(text='00:00:00')
    w.hr_val.configure(text=hr)
    w.step_value.configure(text=steps)
    w.speed_val.configure(text=speed)
    w.cal_val.configure(text=cal)
    w.cov_val.configure(text=jarak)
    w.start.configure(text="Start", command=start)
    
def speed_down():
##    print('coba_support.speed_down')
    sys.stdout.flush()
    
    global speed
##  ++  global start
    if (state):
        if speed > 1.0:
            speed = speed - 0.1
            speed = round(speed,1)
            w.speed_val.configure(text=speed)
    
            GPIO.setmode(GPIO.BCM)
            GPIO.setup(21, GPIO.OUT)
            GPIO.output(21, GPIO.HIGH)

            time.sleep(0.10)
##        root.after(250, speed_down)
            GPIO.output(21, GPIO.LOW)
            GPIO.cleanup()
    

def speed_up():
##    print('coba_support.speed_up')
    sys.stdout.flush()
##    global start
##    start = True
    global speed
    if (state):
        speed = speed + 0.1
        speed = round(speed,1)
        w.speed_val.configure(text=speed)
    
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(19, GPIO.OUT)
        GPIO.output(19, GPIO.HIGH)
##        root.after(250, speed_up)
        time.sleep(0.1)
        GPIO.output(19, GPIO.LOW)
        GPIO.cleanup()


def auto_speed():

    if(state): 
        global min
        global max
        global hr       
        print ('THR :',min,max)
##    global steps
##        print ("hr adalah :",hr)
        if hr > min and hr < max :
            pass
            
        elif hr < min :
            speed_up()
        elif hr > max :
            speed_down()
    root.after(2000,auto_speed)


def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import coba
    coba.vp_start_gui()







