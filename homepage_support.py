#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.17
# In conjunction with Tcl version 8.6
#    Oct 15, 2018 01:51:20 PM WIB  platform: Linux

import sys
import os
sys.path.insert(0, 'MiBand2/')

import time
from base import MiBand2
from constants import ALERT_TYPES
##from register_support import *

#MAC ADDRESS MI BAND 2
MAC = 'D6:EC:F2:B3:70:BA'

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True


def connect():
    print('homepage_support.connect')
    sys.stdout.flush()
    
    import connect_msg
    connect_msg.create_Connect_Mi_Band_2(root, 'new')
    
def other():
    print('homepage_support.other')
    sys.stdout.flush()
    start()

jk = 0
age = 0
weight = 0
def data():
##    while True:
    global age
    global weight
    global jk
    
    fp = open('reg.txt', 'r',os.O_NONBLOCK).read()
    line = fp.split(',')
    
    weight = int(line[1])
    age = int(line [0])
    gender = line [2]
    
    if gender == "Male":
        jk = 0
    else:
        jk = 1
        
    print (gender,weight,age)
    
## RHR 60 BPM
## Rumus HRR HRmax - RHR
hrmax = 0
hrr = 0
def hr_max():
    global age
    global weight
    global gender
    global jk
    global hrr
    data()
    if jk == 0:
        hrmax = 220 - age
        hrr = hrmax - 60
    else:
        hrmax = 226 - age
        hrr = hrmax - 60
        
    print(hrmax, hrr)

def register():
    print('homepage_support.register')
    sys.stdout.flush()
    import register
    register.create_Register(root,'new')
    
ints = [0.65,0.75,0.80,0.85,0.90]
min = 0
max = 0
def recovery():
    print('mode : recovery')
    sys.stdout.flush()
    global hrmax
    global hrr
    global min
    global max
    hr_max()
    min = (hrr*0)+60
    max = (hrr*ints[0])+60
    print (min,max)
    start()
    
def aerobic():
    print('mode : aerobic')
    sys.stdout.flush()
    global hrmax
    global hrr
    global min
    global max
    hr_max()
    min = (hrr*ints[0])+60
    max = (hrr*ints[1])+60
    print (min,max)
    start()

def exteendu():
    print('mode : extensive endurance')
    sys.stdout.flush()
    global hrmax
    global hrr
    global min
    global max
    hr_max()
    min = (hrr*ints[1])+60
    max = (hrr*ints[2])+60
    print (min,max)
    start()

def inteendu():
    print('mode : intensive endurance')
    sys.stdout.flush()
    global hrmax
    global hrr
    global min
    global max
    hr_max()
    min = (hrr*ints[2])+60
    max = (hrr*ints[3])+60
    print (min,max)
    start()

def anaetres():
    print('mode : anaerobic treshold')
    sys.stdout.flush()
    global hrmax
    global hrr
    global min
    global max
    hr_max()
    min = (hrr*ints[3])+60
    max = (hrr*ints[4])+60
    print (min,max)
    start()
    
def maxaer():
    print('mode : max aerobic')
    sys.stdout.flush()
    global hrmax
    global hrr
    global min
    global max
    hr_max()
    min = (hrr*ints[4])+60
    max = (hrr*1)+60
    print (min,max)
    start()


def start():
    print('homepage_support.start')
    sys.stdout.flush()
    import coba
    coba.create_Treadmill(root,'new')
##    coba.__init__(root, new)
##    coba.attributes("-fullscreen", True)

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import homepage
    homepage.vp_start_gui()


